# !/usr/bin/env python2
# coding: utf-8
#

from wctorang import *
from copy import deepcopy
from itertools import chain
import pc
import random

IndexNum = 2

class IPolicySpace(object):
    def __init__(self, rects, index):
        self.rects = rects
        self.index = index

    # is_equal
    def __eq__(self, value):
        return self.__le__(value) and value.__le__(self)

    # is_subset
    def __le__(self, value):
        for sr in self.rects:
            rects = (sr.__and__(vr) for vr in value.rects)
            if sum(r[0].volume for r in rects if r) != sr.volume:
                return False
        return True

    # is_intersect
    def __mul__(self, value):
        for vr in value.rects:
            for sr in self.rects:
                if vr.__mul__(sr):
                    return True
        return False

    # intersect
    def __and__(self, value):
        rects = list(chain.from_iterable(vr.__and__(sr)
            for vr in value.rects for sr in self.rects))
        return PolicySpace(rects) if rects else None

    # subtract
    def __sub__(self, value):
        # deepcopy once
        rects = list(chain.from_iterable(sr.__sub__(value.rects[0])
            for sr in self.rects))
        if not rects: return None
        # update inplace
        result = PolicySpace(rects)
        for vr in value.rects[1:]:
            result.sub_rect(vr)
            if not result.rects:
                return None
        return result

    # union
    def __or__(self, value):
        minuend, subtrahend = (self, value) \
                if len(self.rects) >= len(value.rects) else (value, self)
        srects = deepcopy(subtrahend.rects)
        # deepcopy once
        rects = list(chain.from_iterable(sr.__sub__(subtrahend.rects[0])
            for sr in minuend.rects))
        if not rects: return PolicySpace(srects)
        # update inplace
        result = PolicySpace(rects)
        for vr in subtrahend.rects[1:]:
            result.sub_rect(vr)
            if not result.rects: return PolicySpace(srects)
        result.rects.extend(srects)
        return result

    # intersect a rectangle (inplace)
    def and_rect(self, rect):
        rects = []
        for sr in self.rects:
            for sd, vd in zip(sr.dims, rect.dims):
                if sd[0] > vd[1] or sd[1] < vd[0]:
                    break
                if sd[0] < vd[0]: sd[0] = vd[0]
                if sd[1] > vd[1]: sd[1] = vd[1]
            else:
                rects.append(sr)
        self.rects = rects

    # subtract a rectangle (inplace)
    def sub_rect(self, rect):
        rects = []
        for sr in self.rects:
            relation = sr.__div__(rect)
            if relation is None:
                rects.append(sr)
            elif relation >= 0:
                rects.extend(HyperRect.clip(sr.dims, rect.dims, True))
        self.rects = rects

    # union a rectangle (inplace)
    def or_rect(self, rect):
        rects = []
        for i, sr in enumerate(self.rects):
            relation = sr.__div__(rect)
            if relation is None:
                rects.append(sr)
            elif relation == 0:
                rects.extend(HyperRect.clip(sr.dims, rect.dims, True))
            elif relation > 0:
                rects.extend(self.rects[i:])
                break
        else:
            rects.append(deepcopy(rect))
        self.rects = rects

def GenPolicy(Irs):
    """

    :param Irs:
    :return: Indexed PolicySpace dict;
    """
    IPoSpaces = dict()
    for singleRule in reversed(Irs):
        for IPoSpace in IPoSpaces.values():
            IPoSpace.sub_rect(HyperRect(singleRule[:IndexNum]))
        if singleRule[IndexNum] not in IPoSpaces.keys():
            IPoSpaces[singleRule[IndexNum]] = IPolicySpace([HyperRect(singleRule[:IndexNum])], singleRule[IndexNum])
        else:
            IPoSpaces[singleRule[IndexNum]].or_rect(HyperRect(singleRule[:IndexNum]))
    return IPoSpaces



if __name__ == "__main__":
    # test of atomicPSA
    IndexNum = 2
    rs = [[[1, 1], [1, 1], 1],
          [[1, 2], [3, 4], 2],
          [[3, 4], [1, 1], 3],
          [[1, 3], [1, 1], 2],
          [[2, 4], [2, 2], 1],
          [[1, 2], [2, 3], 3],
          [[1, 4], [1, 4], 4]]
    IPSs = GenPolicy(rs)
    print "Finish Simple Test"
    rs = pc.load_rules("../rules/acl1_100")
    IndexNum = 5
    for sr in rs:
        sr[IndexNum] = random.randint(0, 10)
    print "Finish Real Test"
